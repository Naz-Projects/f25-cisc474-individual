// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}
enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  PENDING
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(USER)
  profile       Profile?
  courses Course[]
  enrollments Enrollment[]
  submissions Submission[]
  Announcement Announcement[]
  @@index([role]) // finding all students and instructors
  @@index([email]) //login purposes
}

model Profile {
  id         String  @id @default(cuid())
  bio        String?
  profilePic String? // URL or path to profile picture
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  @unique
}

model Course {
  id          String   @id @default(cuid())
  title       String
  courseCode  String
  description String?
  instructorID String
  instructor  User  @relation(fields: [instructorID], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignments Assignment[]
  announcements Announcement[]
  // Schedule fields for calendar
  dayOfWeek   String
  startTime   String
  endTime     String
  location    String
  startDate   DateTime
  endDate     DateTime
  @@index([dayOfWeek, startTime]) //for calender view
}

model Enrollment {
  id         String           @id @default(cuid())
  userId     String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  status     EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime         @default(now())

  @@unique([userId, courseId])
  @@index([userId, status]) // find active students
  @@index([courseId, status])
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  maxPoints   Float?
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  submissions Submission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId]) //find assignemnts by course
  @@index([dueDate]) // find upcoming assignments
  @@index([courseId, dueDate])
}

model Submission {
  id           String   @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  content      String
  late        Boolean   @default(false)
  submittedAt  DateTime   @default(now())
  grade        Float?
  feedback     String?

  @@unique([assignmentId, studentId]) // one submission per student per assignment
  @@index([studentId])
  @@index([assignmentId]) //fetching all submissions for an assignment
  @@index([submittedAt]) //sortiing submissions by time
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  instructor  User     @relation(fields: [instructorId], references: [id])
  instructorId String  
  createdAt   DateTime @default(now())
}


